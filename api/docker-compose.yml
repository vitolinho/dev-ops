services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - .env

  database:
    image: postgres:16
    ports:
      - '5432:5432'
    volumes:
      - psql-data:/var/lib/postgresql/data
      - ./scripts/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PG_REP_USER: ${PG_REP_USER}
      PG_REP_PASSWORD: ${PG_REP_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 2s
      timeout: 1s
      retries: 10
    restart: always
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    deploy:
      replicas: ${PRIMARY_REPLICA}

  db-test:
    image: postgres:16
    container_name: porsche_db_test
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=porsche_test
    ports:
      - "5433:5433"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    command: 
      - "-p 5433"

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    depends_on:
      - prometheus
    restart: always

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASSWORD}@database:5432/postgres?sslmode=disable"
    depends_on:
      - database
    restart: always

  database-replica:
    image: postgres:16
    container_name: postgres_replica
    ports:
      - "5435:5432"
    depends_on:
      database:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PG_REP_USER: ${PG_REP_USER}
      PG_REP_PASSWORD: ${PG_REP_PASSWORD}
    volumes:
      - psql-replica-data:/var/lib/postgresql/data
    restart: on-failure:3
    command: |
      bash -c '
        rm -rf /var/lib/postgresql/data/* &&
        if PGPASSWORD=${PG_REP_PASSWORD} psql -h ${PRIMARY_DB_URL} -U ${PG_REP_USER} -d ${DB_NAME} -t -c "SELECT 1 FROM pg_replication_slots WHERE slot_name = '"'"'replica_slot'"'"';" | grep -q 1; then
          PGPASSWORD=${PG_REP_PASSWORD} pg_basebackup -h ${PRIMARY_DB_URL} -D /var/lib/postgresql/data -U ${PG_REP_USER} -Fp -Xs -R -S replica_slot
        else
          PGPASSWORD=${PG_REP_PASSWORD} pg_basebackup -h ${PRIMARY_DB_URL} -D /var/lib/postgresql/data -U ${PG_REP_USER} -Fp -Xs -R -C -S replica_slot
        fi &&
        exec docker-entrypoint.sh postgres -c hot_standby=on
      '
    deploy:
      replicas: ${REPLICA_REPLICA}

  haproxy:
    image: haproxy:2.4
    container_name: haproxy
    ports:
      - "5434:5432"
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - database
      - database-replica

volumes:
  psql-data:
  postgres_test_data:
  prometheus_data:
  grafana_data:
  psql-replica-data:
